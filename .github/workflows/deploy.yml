name: Deploy AfterLife

on:
  push:
    branches: [ "main" ]
    paths:
      - "frontend/**"
      - "backend/**"
      - "docker-compose.prod.yml"
      - "Caddyfile"
      - ".github/workflows/deploy.yml"

env:
  REGISTRY: ghcr.io
  GHCR_NAMESPACE: ${{ github.repository_owner }}
  IMAGE_TAG: sha-${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Build frontend image
        run: |
          docker build -t $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-frontend:${{ env.IMAGE_TAG }} ./frontend
          docker tag $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-frontend:${{ env.IMAGE_TAG }} $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-frontend:latest
          docker push $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-frontend:${{ env.IMAGE_TAG }}
          docker push $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-frontend:latest

      - name: Build backend image
        run: |
          docker build -t $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-backend:${{ env.IMAGE_TAG }} ./backend
          docker tag $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-backend:${{ env.IMAGE_TAG }} $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-backend:latest
          docker push $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-backend:${{ env.IMAGE_TAG }}
          docker push $REGISTRY/${{ env.GHCR_NAMESPACE }}/afterlife-backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Copy compose & Caddyfile to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: "docker-compose.prod.yml,Caddyfile,.env.example"
          target: "~/afterlife"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ~/afterlife
            # Prepare .env if not present (one-time). You can also manage it manually.
            [ -f .env ] || cp .env.example .env
            sed -i "s|GHCR_NAMESPACE=.*|GHCR_NAMESPACE=${{ env.GHCR_NAMESPACE }}|g" .env
            sed -i "s|IMAGE_TAG=.*|IMAGE_TAG=latest|g" .env
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            docker system prune -f